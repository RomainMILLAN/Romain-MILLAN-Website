security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    providers:
        backend_users:
            memory:
                users:
                    millanr: { password: '%env(MILLANR_AUTH_PASSWORD)%', roles: [ 'ROLE_USER', 'ROLE_ADMIN' ] }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        panel:
            pattern: ^/
            provider: backend_users
            logout:
                path: app_security_logout
                target: /
            form_login:
                always_use_default_target_path: true
                default_target_path: app_panel_dashboard
                login_path: app_security_login
                check_path: app_security_login
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 86400

        main:
            lazy: true

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_USER: ROLE_USER

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/security/login, roles: PUBLIC_ACCESS }
        - { path: ^/panel, roles: IS_AUTHENTICATED }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
